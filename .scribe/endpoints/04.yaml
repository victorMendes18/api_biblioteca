name: Users
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token}'
    urlParameters: []
    queryParameters: []
    bodyParameters:
      page:
        name: page
        description: 'Must be at least 1.'
        required: false
        example: 1
        type: integer
        custom: []
      page_size:
        name: page_size
        description: 'Must be at least 1.'
        required: false
        example: 0
        type: integer
        custom: []
      search:
        name: search
        description: ''
        required: false
        example: id
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address.'
        required: false
        example: tyrique70@example.net
        type: string
        custom: []
      ordering:
        name: ordering
        description: 'Must be one of <code>name</code> or <code>created_at</code>.'
        required: false
        example: created_at
        type: string
        custom: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Users returned successfully.",
               "users": [
                   {
                       "id": 1,
                       "name": "user",
                       "email": "user@gmail.com",
                       "type": "adm",
                       "email_verified_at": "2024-09-16T18:00:16.000000Z",
                       "avatar_url": null,
                       "created_at": "2024-09-16T18:00:16.000000Z",
                       "updated_at": "2024-09-16T18:00:16.000000Z",
                       "deleted_at": null
                   }
               ],
               "total_users": 3
          }
        headers: []
        description: '200'
      -
        status: 422
        content: |-
          {
            "message": "Validation Error",
            "errors": {
              "email": [
                "The email field is required."
              ]
            }
          }
        headers: []
        description: '422'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/users
    metadata:
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token}'
    urlParameters: []
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must not be greater than 255 characters.'
        required: true
        example: xbhjyntosktklpvrafpkwnmluawnlvjxasskfiuqyawpbnjejxurgukkddxsfymzaabikbkejmkvswozvqzopxhbgzmkssnpbtetlunrwxquiquwpgsdadsesuvdzybdmxbfkhzzzszrcaucyawbjohbdyuuoidmyseqxkpmfcuyiauklvwoymsupqnzkxyoqdkyqvxjgjnsnhhkysjkpgfnaawxtutuifmhbxawgowopqehzu
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address. Must not be greater than 255 characters.'
        required: true
        example: xjtcuvpjtoyajjnouxsfjpzvurghjxsomorsjniyoxutfdidewsittgrlflnjfvdytejxzuuasnwrzbbgomvhewuluz
        type: string
        custom: []
      password:
        name: password
        description: 'Must be at least 8 characters.'
        required: true
        example: ''
        type: string
        custom: []
      type:
        name: type
        description: 'Must be one of <code>adm</code> or <code>librarian</code>.'
        required: true
        example: adm
        type: string
        custom: []
    responses:
      -
        status: 201
        content: |-
          {
              "message": "User created successfully.",
              "user": {
                  "name": "user",
                  "email": "user@gmail.com",
                  "type": "adm",
                  "updated_at": "2024-09-22T00:30:29.000000Z",
                  "created_at": "2024-09-22T00:30:29.000000Z",
                  "id": 16
              }
          }
        headers: []
        description: '201'
      -
        status: 422
        content: |-
          {
            "message": "Validation Error",
            "errors": {
              "email": [
                "The email field is required."
              ]
            }
          }
        headers: []
        description: '422'
    responseFields: []
  -
    httpMethods:
      - PUT
    uri: 'api/users/{id}'
    metadata:
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must not be greater than 255 characters.'
        required: true
        example: qmgsmjcxspkyfeijkgetdkjcigd
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address. Must not be greater than 255 characters.'
        required: true
        example: xgqjpfjzopqbbdgztvvrkshswbynuzdvblgdpiinzziabauwvrluialusmzxwqrjgpruylmumcsytzuytxauyrh
        type: string
        custom: []
      password:
        name: password
        description: 'Must be at least 8 characters.'
        required: true
        example: ''
        type: string
        custom: []
      type:
        name: type
        description: 'Must be one of <code>adm</code> or <code>librarian</code>.'
        required: true
        example: adm
        type: string
        custom: []
    responses:
      -
        status: 200
        content: |-
          {
              "message": "User updated successfully.",
              "user": {
                  "id": 3,
                  "name": "user",
                  "email": "user@gmail.com",
                  "type": "librarian",
                  "email_verified_at": "2024-09-16T15:42:16.000000Z",
                  "avatar_url": null,
                  "created_at": "2024-09-18T16:57:05.000000Z",
                  "updated_at": "2024-09-18T17:01:00.000000Z",
                  "deleted_at": null
              }
          }
        headers: []
        description: '200'
      -
        status: 422
        content: |-
          {
            "message": "Validation Error",
            "errors": {
              "email": [
                "The email field is required."
              ]
            }
          }
        headers: []
        description: '422'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}'
    metadata:
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "message": "User returned successfully.",
              "user": {
                  "id": 3,
                  "name": "user",
                  "email": "user@gmail.com",
                  "type": "librarian",
                  "email_verified_at": "2024-09-16T15:42:16.000000Z",
                  "avatar_url": null,
                  "created_at": "2024-09-18T16:57:05.000000Z",
                  "updated_at": "2024-09-18T17:01:00.000000Z",
                  "deleted_at": null
              }
          }
        headers: []
        description: '200'
      -
        status: 422
        content: |-
          {
            "message": "Validation Error",
            "errors": {
              "email": [
                "The email field is required."
              ]
            }
          }
        headers: []
        description: '422'
    responseFields: []
  -
    httpMethods:
      - DELETE
    uri: 'api/users/{id}'
    metadata:
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "message": "User deleted successfully.",
              "user": {
                  "id": 3,
                  "name": "user",
                  "email": "user@gmail.com",
                  "type": "librarian",
                  "email_verified_at": "2024-09-16T15:42:16.000000Z",
                  "avatar_url": null,
                  "created_at": "2024-09-18T16:57:05.000000Z",
                  "updated_at": "2024-09-18T17:01:00.000000Z",
                  "deleted_at": null
              }
          }
        headers: []
        description: '200'
      -
        status: 422
        content: |-
          {
            "message": "Validation Error",
            "errors": {
              "email": [
                "The email field is required."
              ]
            }
          }
        headers: []
        description: '422'
    responseFields: []
  -
    httpMethods:
      - PATCH
    uri: api/users/reset_password
    metadata:
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token}'
    urlParameters: []
    queryParameters: []
    bodyParameters:
      old_password:
        name: old_password
        description: 'Must be at least 8 characters.'
        required: true
        example: dqqc
        type: string
        custom: []
      new_password:
        name: new_password
        description: 'Must be at least 8 characters.'
        required: true
        example: lxxaw
        type: string
        custom: []
    responses:
      -
        status: 200
        content: |-
          {
             "old_password": "testesenha",
             "new_password": "testesenha1",
             "new_password_confirmation": "testesenha1"
          }
        headers: []
        description: '200'
      -
        status: 422
        content: |-
          {
            "message": "Validation Error",
            "errors": {
              "email": [
                "The email field is required."
              ]
            }
          }
        headers: []
        description: '422'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/users/confirmationEmail
    metadata:
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token}'
    urlParameters: []
    queryParameters: []
    bodyParameters:
      token:
        name: token
        description: ''
        required: true
        example: officia
        type: string
        custom: []
    responses:
      -
        status: 200
        content: |-
          {
             "message": "Email confirmed successfully.",
          }
        headers: []
        description: '200'
      -
        status: 422
        content: |-
          {
            "message": "Validation Error",
            "errors": {
              "email": [
                "The email field is required."
              ]
            }
          }
        headers: []
        description: '422'
    responseFields: []
